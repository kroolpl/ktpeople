---
const navItems = [
  { href: "/", label: "Home" },
  { href: "/services", label: "Services" },
  { href: "/about", label: "About" },
  { href: "/contact", label: "Contact" }
];
import { Image } from 'astro:assets';
import logo from '../assets/images/logo.svg';
---

<div class="menu-container md:hidden">
  <!-- Trigger Button -->
  <button
    class="menu-toggle"
    aria-label="Toggle menu"
    aria-expanded="false"
    data-menu-toggle
  >
    <span class="hamburger"></span>
  </button>
</div>

<!-- Fullscreen Overlay -->
<div class="fullscreen-overlay" data-menu-overlay aria-hidden="true">
  <div class="parallax-bg">
    <Image 
      src={logo} 
      alt=""
      class="background-logo"
      width={800}
      height={800}
    />
  </div>
  
  <nav class="menu-content">
    <div class="menu-grid">
      {navItems.map(item => (
        <a href={item.href} class="menu-item">{item.label}</a>
      ))}
    </div>
  </nav>
</div>

<style>
  /* Base Styles */
  .menu-container {
    position: fixed;
    bottom: 0;
    right: 0;
    z-index: 9998;
    pointer-events: none;
  }

  .menu-toggle {
    position: relative;
    pointer-events: auto;
    bottom: 1.5rem;
    right: 1.5rem;
    background: linear-gradient(to right, #44726C, #558781);
    border: none;
    border-radius: 50%;
    width: 60px;
    height: 60px;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 20px rgba(68, 114, 108, 0.3);
    animation: float 3s ease-in-out infinite;
    margin: 0;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .menu-toggle:hover {
    transform: scale(1.05);
    box-shadow: 0 8px 25px rgba(68, 114, 108, 0.4);
  }

  .hamburger {
    display: block;
    width: 26px;
    height: 2px;
    background: white;
    position: relative;
    transition: all 0.3s ease;
  }

  .hamburger::before,
  .hamburger::after {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    background: inherit;
    transition: inherit;
  }

  .hamburger::before { top: -8px; }
  .hamburger::after { top: 8px; }

  /* Active State */
  [aria-expanded="true"] .hamburger {
    transform: rotate(45deg);
    background: white;
  }

  [aria-expanded="true"] .hamburger::before {
    transform: rotate(90deg);
    top: 0;
  }

  [aria-expanded="true"] .hamburger::after {
    transform: rotate(90deg);
    top: 0;
  }

  /* Fullscreen Overlay */
  .fullscreen-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.6s ease, visibility 0.6s;
    z-index: 9999;
    overflow: hidden;
    background: linear-gradient(135deg, 
      rgb(17, 24, 39, 0.97) 0%,
      rgb(55, 65, 81, 0.95) 50%,
      rgb(17, 24, 39, 0.98) 100%
    );
    backdrop-filter: blur(10px);
  }

  .fullscreen-overlay[aria-hidden="false"] {
    opacity: 1;
    visibility: visible;
  }

  /* Parallax Background */
  .parallax-bg {
    position: absolute;
    width: 120%;
    height: 120%;
    top: -10%;
    left: -10%;
    background: radial-gradient(
      circle at center,
      rgba(255, 255, 255, 0.15) 0%,
      rgba(255, 255, 255, 0.08) 25%,
      transparent 70%
    );
    transition: transform 0.3s ease-out;
    will-change: transform;
  }

  .background-logo {
    position: absolute;
    top: 70%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 100%;
    height: auto;
    opacity: 0.15;
    pointer-events: none;
    filter: brightness(0) invert(0.7);
    mix-blend-mode: soft-light;
  }

  /* Menu Content */
  .menu-content {
    position: relative;
    height: 100vh;
    display: grid;
    place-items: center;
    color: #44726C;
    z-index: 2;
    backdrop-filter: blur(5px);
  }

  .menu-grid {
    display: grid;
    gap: 2rem;
    text-align: center;
    perspective: 1000px;
    position: relative;
    z-index: 3;
  }

  .menu-item {
    font-size: 2.5rem;
    font-weight: 700;
    color: #44726C;
    text-decoration: none;
    transform: translateY(20px);
    opacity: 0;
    transition: all 0.4s ease;
    text-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

  .menu-item:hover {
    color: #558781;
    transform: scale(1.05);
    text-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }

  .fullscreen-overlay[aria-hidden="false"] .menu-item {
    transform: translateY(0);
    opacity: 1;
  }

  /* Staggered Animation */
  .menu-item:nth-child(1) { transition-delay: 0.1s; }
  .menu-item:nth-child(2) { transition-delay: 0.2s; }
  .menu-item:nth-child(3) { transition-delay: 0.3s; }
  .menu-item:nth-child(4) { transition-delay: 0.4s; }

  @media (max-width: 480px) {
    .menu-item {
      font-size: 2rem;
    }
  }

  @keyframes float {
    0% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-10px);
    }
    100% {
      transform: translateY(0px);
    }
  }
</style>

<script>
  const toggle = document.querySelector('[data-menu-toggle]');
  const overlay = document.querySelector('[data-menu-overlay]') as HTMLElement;
  
  // Toggle Menu
  function toggleMenu() {
    const isExpanded = toggle?.getAttribute('aria-expanded') === 'true';
    toggle?.setAttribute('aria-expanded', (!isExpanded).toString());
    overlay?.setAttribute('aria-hidden', isExpanded.toString());
    document.body.style.overflow = isExpanded ? 'auto' : 'hidden';
  }

  // Event Listeners
  toggle?.addEventListener('click', toggleMenu);
  
  // Close on ESC
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && overlay?.getAttribute('aria-hidden') === 'false') {
      toggleMenu();
    }
  });

  // Parallax Effect
  overlay?.addEventListener('mousemove', (e: MouseEvent) => {
    const { clientX, clientY } = e;
    const speed = -15;
    const x = (clientX - window.innerWidth / 2) / speed;
    const y = (clientY - window.innerHeight / 2) / speed;
    
    const bg = overlay.querySelector('.parallax-bg') as HTMLElement;
    if (bg) {
      bg.style.transform = `translate3d(${x}px, ${y}px, 0) scale(1.1)`;
    }
  });
</script> 